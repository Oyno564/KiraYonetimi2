// <auto-generated />
using System;
using KiraYonetimi.DataAcsses.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace KiraYonetimi.API.Migrations
{
    [DbContext(typeof(KiraContext))]
    [Migration("20250903061918_mig_2")]
    partial class mig_2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("KiraYonetimi.Entities.Entities.ApartType", b =>
                {
                    b.Property<int>("ApartTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ApartTypeId"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("TypeName")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("ApartTypeId");

                    b.ToTable("ApartTypes");
                });

            modelBuilder.Entity("KiraYonetimi.Entities.Entities.ApartUser", b =>
                {
                    b.Property<int>("ApartUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ApartUserId"));

                    b.Property<int>("ApartId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("ApartUserId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("ApartUsers");
                });

            modelBuilder.Entity("KiraYonetimi.Entities.Entities.Apartment", b =>
                {
                    b.Property<int>("ApartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ApartId"));

                    b.Property<int>("ApartBlock")
                        .HasColumnType("integer");

                    b.Property<int>("ApartFloor")
                        .HasColumnType("integer");

                    b.Property<int>("ApartNo")
                        .HasColumnType("integer");

                    b.Property<bool>("ApartOwnerOrTenant")
                        .HasColumnType("boolean");

                    b.Property<bool>("ApartStatus")
                        .HasColumnType("boolean");

                    b.Property<int>("ApartTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("ApartUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("ApartId");

                    b.HasIndex("ApartTypeId");

                    b.HasIndex("ApartUserId");

                    b.ToTable("Apartments");
                });

            modelBuilder.Entity("KiraYonetimi.Entities.Entities.Invoice", b =>
                {
                    b.Property<int>("InvoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("InvoiceId"));

                    b.Property<int>("ApartId")
                        .HasColumnType("integer");

                    b.Property<int?>("ApartUserId")
                        .HasColumnType("integer");

                    b.Property<int?>("ApartmentApartId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("InvoiceAmount")
                        .HasColumnType("numeric");

                    b.Property<int>("InvoiceMonth")
                        .HasColumnType("integer");

                    b.Property<bool>("InvoiceStatus")
                        .HasColumnType("boolean");

                    b.Property<int>("InvoiceYear")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("InvoiceId");

                    b.HasIndex("ApartUserId");

                    b.HasIndex("ApartmentApartId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("KiraYonetimi.Entities.Entities.Message", b =>
                {
                    b.Property<int>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MessageId"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("FromUserId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("MessageContent")
                        .HasColumnType("text");

                    b.Property<DateTime>("MessageDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ToUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("MessageId");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("KiraYonetimi.Entities.Entities.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PaymentId"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<decimal>("PaymentAmount")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PaymentMethod")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("PaymentId");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("UserId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("KiraYonetimi.Entities.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserId"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("Phone")
                        .HasColumnType("integer");

                    b.Property<string>("PlakaNo")
                        .HasColumnType("text");

                    b.Property<bool>("Role")
                        .HasColumnType("boolean");

                    b.Property<int>("TcNo")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("KiraYonetimi.Entities.Entities.ApartUser", b =>
                {
                    b.HasOne("KiraYonetimi.Entities.Entities.User", "User")
                        .WithOne("ApartUser")
                        .HasForeignKey("KiraYonetimi.Entities.Entities.ApartUser", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("KiraYonetimi.Entities.Entities.Apartment", b =>
                {
                    b.HasOne("KiraYonetimi.Entities.Entities.ApartType", "ApartType")
                        .WithMany("Apartments")
                        .HasForeignKey("ApartTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KiraYonetimi.Entities.Entities.ApartUser", "ApartUser")
                        .WithMany("Apartments")
                        .HasForeignKey("ApartUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApartType");

                    b.Navigation("ApartUser");
                });

            modelBuilder.Entity("KiraYonetimi.Entities.Entities.Invoice", b =>
                {
                    b.HasOne("KiraYonetimi.Entities.Entities.ApartUser", "ApartUser")
                        .WithMany("Invoices")
                        .HasForeignKey("ApartUserId");

                    b.HasOne("KiraYonetimi.Entities.Entities.Apartment", "Apartment")
                        .WithMany("Invoices")
                        .HasForeignKey("ApartmentApartId");

                    b.Navigation("ApartUser");

                    b.Navigation("Apartment");
                });

            modelBuilder.Entity("KiraYonetimi.Entities.Entities.Message", b =>
                {
                    b.HasOne("KiraYonetimi.Entities.Entities.User", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("KiraYonetimi.Entities.Entities.Payment", b =>
                {
                    b.HasOne("KiraYonetimi.Entities.Entities.Invoice", "Invoice")
                        .WithMany("Payments")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KiraYonetimi.Entities.Entities.User", "User")
                        .WithMany("Payments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Invoice");

                    b.Navigation("User");
                });

            modelBuilder.Entity("KiraYonetimi.Entities.Entities.ApartType", b =>
                {
                    b.Navigation("Apartments");
                });

            modelBuilder.Entity("KiraYonetimi.Entities.Entities.ApartUser", b =>
                {
                    b.Navigation("Apartments");

                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("KiraYonetimi.Entities.Entities.Apartment", b =>
                {
                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("KiraYonetimi.Entities.Entities.Invoice", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("KiraYonetimi.Entities.Entities.User", b =>
                {
                    b.Navigation("ApartUser");

                    b.Navigation("Messages");

                    b.Navigation("Payments");
                });
#pragma warning restore 612, 618
        }
    }
}
